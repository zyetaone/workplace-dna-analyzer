import{z as E,P as p,I as m,aB as b,J as u}from"./oQ9KHoCl.js";import{t as f}from"./CjJHMaRL.js";function y(s,d){var e=void 0,t;E(()=>{e!==(e=d())&&(t&&(p(t),t=null),e&&(t=m(()=>{b(()=>e(s))})))})}function C(s,d,e,t,c,o){var i=s.__className;if(u||i!==e||i===void 0){var r=f(e,t);(!u||r!==s.getAttribute("class"))&&(r==null?s.removeAttribute("class"):s.className=r),s.__className=e}return o}function _(s){return function(e){let t=null,c,o=s.reconnectDelay||1e3;const i=s.maxReconnectDelay||3e4;let r=!1;function l(){try{t=new EventSource(s.url),t.onopen=()=>{console.log("✅ SSE Connected (onopen fired)"),o=s.reconnectDelay||1e3,e.dispatchEvent(new CustomEvent("realtime:connected")),e.setAttribute("data-realtime-status","connected")},t.onmessage=a=>{try{const n=JSON.parse(a.data),v=`realtime:${n.type}`;e.dispatchEvent(new CustomEvent(v,{detail:n.payload,bubbles:!0}))}catch(n){console.error("Failed to parse SSE message:",n)}},t.onerror=a=>{console.error("❌ SSE Error:",a),e.setAttribute("data-realtime-status","disconnected"),e.dispatchEvent(new CustomEvent("realtime:disconnected")),t&&(t.close(),t=null),!r&&s.reconnect!==!1&&(clearTimeout(c),c=setTimeout(()=>{l(),o=Math.min(o*2,i)},o))},t.addEventListener("connected",a=>{console.log("✅ SSE Connected Event received");const n=JSON.parse(a.data);e.dispatchEvent(new CustomEvent("realtime:connected",{detail:n,bubbles:!0})),e.setAttribute("data-realtime-status","connected")}),t.addEventListener("response",a=>{const n=JSON.parse(a.data);e.dispatchEvent(new CustomEvent("realtime:response",{detail:n,bubbles:!0}))}),t.addEventListener("attendee_joined",a=>{const n=JSON.parse(a.data);e.dispatchEvent(new CustomEvent("realtime:attendee_joined",{detail:n,bubbles:!0}))}),t.addEventListener("analytics",a=>{const n=JSON.parse(a.data);e.dispatchEvent(new CustomEvent("realtime:analytics",{detail:n,bubbles:!0}))}),t.addEventListener("response_received",a=>{const n=JSON.parse(a.data);e.dispatchEvent(new CustomEvent("realtime:response_received",{detail:n,bubbles:!0}))}),t.addEventListener("attendee_completed",a=>{const n=JSON.parse(a.data);e.dispatchEvent(new CustomEvent("realtime:attendee_completed",{detail:n,bubbles:!0}))})}catch(a){console.error("Failed to create EventSource:",a),e.dispatchEvent(new CustomEvent("realtime:error",{detail:a}))}}return l(),e.__realtimeDisconnect=()=>{r=!0,clearTimeout(c),t&&(console.log("🔌 Closing SSE connection"),t.close(),t=null),e.removeAttribute("data-realtime-status"),e.dispatchEvent(new CustomEvent("realtime:disconnected"))},()=>{r=!0,clearTimeout(c),t&&(t.close(),t=null),e.removeAttribute("data-realtime-status")}}}export{y as a,_ as r,C as s};
